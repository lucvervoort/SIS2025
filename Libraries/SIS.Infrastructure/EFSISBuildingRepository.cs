using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using SIS.Domain.Interfaces;
using SIS.Infrastructure.EFRepository.Context;
using Building = SIS.Domain.Building;

namespace SIS.Infrastructure
{
    public class EFSISBuildingRepository : ISISBuildingRepository
    {
        private readonly ILogger<EFSISBuildingRepository> _logger;
        private readonly IConfiguration _configuration;
        private readonly SisDbContext _context;

        private Dictionary<string, Building> _building;
        public Dictionary<string, Building> Buildings
        {
            get
            {
                if (_building != null) return _building;
                return RefreshBuilding();
            }
        }

        public EFSISBuildingRepository(ILogger<EFSISBuildingRepository> logger, IConfiguration configuration, SisDbContext context)
        {
            _logger = logger;
            _configuration = configuration;
            _context = context;

            RefreshBuilding();
        }

        public Dictionary<string, Building> RefreshBuilding()
        {
            _building = new();
            var dbBuilding = _context.Buildings.ToList();
            foreach (var building in dbBuilding)
            {
                var rm = new Building
                {
                    BuildingId = building.BuildingId,
                    LocationId = building.LocationId,
                    Name = building.Name
                };

                _building.Add(rm.Name, rm);
            }
            return _building;
        }

        public void Delete(Building building)
        {
            if (!Exists(building))
            {
                return;
            }

            var efBuilding = _context.Buildings.Where(bd => bd.Name == building.Name && bd.BuildingId == building.BuildingId).FirstOrDefault();

            try
            {
                var efRemove = _context.Remove(efBuilding).Entity;
                var count = _context.SaveChanges();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message, ex);
            }

        }

        public bool Exists(Building building)
        {
            var efBuilding = _context.Buildings.Where(bd => bd.Name == building.Name && bd.BuildingId == building.BuildingId).FirstOrDefault();
            return efBuilding != null;
        }

        public void Insert(Building building)
        {
            if (_building.ContainsKey(building.Name))
            {
                return;
            }

            EFRepository.Models.Building newBuilding = new()
            {
                //id is generated by database
                Name = building.Name
            };

            var efBuilding = _context.Buildings.Add(newBuilding).Entity;
            var count = _context.SaveChanges();
        }

        public void Update(Building buildingToUpdate, Building newBuilding)
        {
            if (!Exists(buildingToUpdate)) return;

            var efBuildingToUpdate = _context.Buildings.Where(bd => bd.Name == buildingToUpdate.Name && bd.BuildingId == buildingToUpdate.BuildingId).FirstOrDefault();

            try
            {
                //id is not updated
                efBuildingToUpdate.Name = newBuilding.Name;


                var efUpdate = _context.Update(efBuildingToUpdate).Entity;
                var count = _context.SaveChanges();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message, ex);
            }
        }

    }
}
