using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using SIS.Domain.Interfaces;
using SIS.Infrastructure.EFRepository.Context;
using TeacherPreference = SIS.Domain.TeacherPreference;

namespace SIS.Infrastructure
{
    public class EFSISTeacherPreferenceRepository : ISISTeacherPreferenceRepository
    {
        private readonly ILogger<EFSISTeacherPreferenceRepository> _logger;
        private readonly IConfiguration _configuration;
        private readonly SisDbContext _context;

        private Dictionary<string, TeacherPreference> _teacherPreferences;
        public Dictionary<string, TeacherPreference> TeacherPreferences
        {
            get
            {
                if (_teacherPreferences != null) return _teacherPreferences;
                return RefreshTeacherPreferences();
            }
        }

        public EFSISTeacherPreferenceRepository(ILogger<EFSISTeacherPreferenceRepository> logger, IConfiguration configuration, SisDbContext context)
        {
            _logger = logger;
            _configuration = configuration;
            _context = context;

            RefreshTeacherPreferences(); 
        }

        public Dictionary<string, TeacherPreference> RefreshTeacherPreferences()
        {
            _teacherPreferences = new();
            var dbTeacherPreferences = _context.TeacherPreferences.ToList();
            foreach(var teacherPreference in dbTeacherPreferences)
            {
                var tp = new TeacherPreference
                {
                    TeacherPreferenceId = teacherPreference.TeacherPreferenceId,
                    Preference = teacherPreference.Preference,
                    Description = teacherPreference.Description
                };

                _teacherPreferences.Add(tp.Description, tp);
            }

            return _teacherPreferences;
        }

        public void Delete(TeacherPreference teacherPreference)
        {
            if(!Exists(teacherPreference)) 
            {
                return;
            }

            var efTeacherPreference = _context.TeacherPreferences.Where(tp => tp.Preference == teacherPreference.Preference && tp.TeacherPreferenceId == teacherPreference.TeacherPreferenceId).FirstOrDefault();

            try
            {
                var efRemove = _context.Remove(efTeacherPreference).Entity;
                var count = _context.SaveChanges();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message, ex);
            }
    
        }

        public bool Exists(TeacherPreference teacherPreference)
        {
            var efTeacherPreference = _context.TeacherPreferences.Where(tp => tp.Preference == teacherPreference.Preference && tp.TeacherPreferenceId == teacherPreference.TeacherPreferenceId).FirstOrDefault();
            return efTeacherPreference != null;
        }

        public void Insert(TeacherPreference teacherPreference)
        {
            if(_teacherPreferences.ContainsKey(teacherPreference.Description)) 
            { 
                return; 
            }

            EFRepository.Models.TeacherPreference newTeacherPreference = new()
            {
                //id is generated by database
                Preference = teacherPreference.Preference,
                Description = teacherPreference.Description
            };

            var efTeacherPreference = _context.TeacherPreferences.Add(newTeacherPreference).Entity;
            var count = _context.SaveChanges();
        }

        public void Update(TeacherPreference teacherPreferenceToUpdate, TeacherPreference newTeacherPreference)
        {
            if (!Exists(teacherPreferenceToUpdate)) return;

            var efTeacherPreferenceToUpdate = _context.TeacherPreferences.Where(tp => tp.Preference == teacherPreferenceToUpdate.Preference && tp.TeacherPreferenceId == teacherPreferenceToUpdate.TeacherPreferenceId).FirstOrDefault();

            try
            {
                //id is not updated
                efTeacherPreferenceToUpdate.Preference = newTeacherPreference.Preference;
                efTeacherPreferenceToUpdate.Description = newTeacherPreference.Description;

                var efUpdate = _context.Update(efTeacherPreferenceToUpdate).Entity;
                var count = _context.SaveChanges();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message, ex);
            }
        }


    }
}
