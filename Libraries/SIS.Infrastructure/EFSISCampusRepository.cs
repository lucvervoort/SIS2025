using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using SIS.Domain.Interfaces;
using SIS.Infrastructure.EFRepository.Context;
using Campus = SIS.Domain.Campus;

namespace SIS.Infrastructure
{
    public class EFSISCampusRepository : ISISCampusRepository
    {
        #region Private members
        private readonly ILogger<EFSISCampusRepository> _logger;
        private readonly IConfiguration _configuration;
        private readonly SisDbContext _context;
        private static Dictionary<string, Campus>? _campus;
        #endregion

        public Dictionary<string, Campus>? Campus => _campus;

        public EFSISCampusRepository(ILogger<EFSISCampusRepository> logger, IConfiguration configuration, SisDbContext context)
        {
            _logger = logger;
            _configuration = configuration;
            _context = context;

            Initialize();
        }

        private void Initialize()
        {
            if(_campus == null)
            {
                _campus = new();
                RefreshCampus();
            }
        }

        public Dictionary<string, Campus> RefreshCampus()
        {
           _campus.Clear();
           
           var dbCampus = _context.Campuses.ToList();
           foreach (var campus in dbCampus)
           {
                var cmp = new Campus
                {
                    CampusId = campus.CampusId,
                    Name = campus.Name
                };

                _campus.Add(cmp.Name, cmp);
           }
           return _campus;
        }

        public void Delete(Campus campus)
        {
            if (!Exists(campus))
            {
                return;
            }

            var efCampus = _context.Campuses.Where(cmp => cmp.Name == campus.Name && cmp.CampusId == campus.CampusId).FirstOrDefault();

            try
            {
                var efRemove = _context.Remove(efCampus).Entity;
                _campus.Remove(campus.Name);
                var count = _context.SaveChanges();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message, ex);
            }

        }

        public bool Exists(Campus campus)
        {
            var efCampus = _context.Campuses.Where(cmp => cmp.Name == campus.Name && cmp.CampusId == campus.CampusId).FirstOrDefault();
            return efCampus != null;
        }

        public Campus Insert(Campus campus)
        {
            if (_campus.ContainsKey(campus.Name))
            {
                return _campus[campus.Name];
            }

            EFRepository.Models.Campus newCampus = new()
            {
                //id is generated by database
                Name = campus.Name
            };

            var efCampus = _context.Campuses.Add(newCampus).Entity;
            var count = _context.SaveChanges(); // updates database
            if( count == 1 )
            {
                campus.CampusId = efCampus.CampusId;
                _campus.Add(campus.Name, campus);
            }
            return campus;
        }

        public void Update(Campus campusToUpdate, Campus newCampus)
        {
            if (!Exists(campusToUpdate)) return;

            var efCampusToUpdate = _context.Campuses.Where(cmp => cmp.Name == campusToUpdate.Name && cmp.CampusId == campusToUpdate.CampusId).FirstOrDefault();

            try
            {
                //id is not updated
                efCampusToUpdate.Name = newCampus.Name;


                var efUpdate = _context.Update(efCampusToUpdate).Entity;
                var count = _context.SaveChanges();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message, ex);
            }
        }

    }
}
