using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using SIS.Domain.Interfaces;
using SIS.Infrastructure.EFRepository.Context;
using RoomKind = SIS.Domain.RoomKind;

namespace SIS.Infrastructure
{
    public class EFSISRoomKindRepository : ISISRoomKindRepository
    {
        private readonly ILogger<EFSISRoomKindRepository> _logger;
        private readonly IConfiguration _configuration;
        private readonly SisDbContext _context;

        private Dictionary<string, RoomKind> _roomKind;
        public Dictionary<string, RoomKind> RoomKinds
        {
            get
            {
                if (_roomKind != null) return _roomKind;
                return RefreshRoomKind();
            }
        }

        public EFSISRoomKindRepository(ILogger<EFSISRoomKindRepository> logger, IConfiguration configuration, SisDbContext context)
        {
            _logger = logger;
            _configuration = configuration;
            _context = context;

            RefreshRoomKind();
        }

        public Dictionary<string, RoomKind> RefreshRoomKind()
        {
            _roomKind = new();
            var dbRoomKind = _context.RoomKinds.ToList();
            foreach (var roomKind in dbRoomKind)
            {
                var rm = new RoomKind
                {
                    RoomKindId = roomKind.RoomKindId,
                    Name = roomKind.Name,
                };

                _roomKind.Add(rm.Name, rm);
            }
            return _roomKind;
        }

        public void Delete(RoomKind roomKind)
        {
            if (!Exists(roomKind))
            {
                return;
            }

            var efRoomKind = _context.RoomKinds.Where(rmk => rmk.Name == roomKind.Name && rmk.RoomKindId == roomKind.RoomKindId).FirstOrDefault();

            try
            {
                var efRemove = _context.Remove(efRoomKind).Entity;
                var count = _context.SaveChanges();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message, ex);
            }

        }

        public bool Exists(RoomKind roomKind)
        {
            var efRoomKind = _context.RoomKinds.Where(rmk => rmk.Name == roomKind.Name && rmk.RoomKindId == roomKind.RoomKindId).FirstOrDefault();
            return efRoomKind != null;
        }

        public void Insert(RoomKind roomKind)
        {
            if (_roomKind.ContainsKey(roomKind.Name))
            {
                return;
            }

            EFRepository.Models.RoomKind newRoomKind = new()
            {
                //id is generated by database
                Name = roomKind.Name
            };

            var efRoomType = _context.RoomKinds.Add(newRoomKind).Entity;
            var count = _context.SaveChanges();
        }

        public void Update(RoomKind roomKindToUpdate, RoomKind newRoomKind)
        {
            if (!Exists(roomKindToUpdate)) return;

            var efRoomKindToUpdate = _context.RoomKinds.Where(rmk => rmk.Name == roomKindToUpdate.Name && rmk.RoomKindId == roomKindToUpdate.RoomKindId).FirstOrDefault();

            try
            {
                //id is not updated
                efRoomKindToUpdate.Name = newRoomKind.Name;


                var efUpdate = _context.Update(efRoomKindToUpdate).Entity;
                var count = _context.SaveChanges();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message, ex);
            }
        }

    }
}
