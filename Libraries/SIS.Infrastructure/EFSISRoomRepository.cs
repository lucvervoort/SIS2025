using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using SIS.Domain.Interfaces;
using SIS.Infrastructure.EFRepository.Context;
using Room = SIS.Domain.Room;

namespace SIS.Infrastructure
{
    public class EFSISRoomRepository : ISISRoomRepository
    {
        private readonly ILogger<EFSISRoomRepository> _logger;
        private readonly IConfiguration _configuration;
        private readonly SisDbContext _context;

        private Dictionary<string, Room> _room;
        public Dictionary<string, Room> Rooms
        {
            get
            {
                if (_room != null) return _room;
                return RefreshRoom();
            }
        }

        public EFSISRoomRepository(ILogger<EFSISRoomRepository> logger, IConfiguration configuration, SisDbContext context)
        {
            _logger = logger;
            _configuration = configuration;
            _context = context;

            RefreshRoom();
        }

        public Dictionary<string, Room> RefreshRoom()
        {
            _room = new();
            var dbRoom = _context.Rooms.ToList();
            foreach (var room in dbRoom)
            {
                var rm = new Room
                    {
                        RoomId = room.RoomId,
                        BuildingId = room.BuildingId,
                        Name = room.Name,
                        RoomTypeId = room.RoomTypeId,
                        RoomKindId = room.RoomKindId,
                        Capacity = room.Capacity,
                    };

                    _room.Add(rm.Name, rm);
            }
            return _room;
        }

        public void Delete(Room room)
        {
            if (!Exists(room))
            {
                return;
            }

            var efRoom = _context.Rooms.Where(rm => rm.Name == room.Name && rm.RoomId == room.RoomId).FirstOrDefault();

            try
            {
                var efRemove = _context.Remove(efRoom).Entity;
                var count = _context.SaveChanges();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message, ex);
            }

        }

        public bool Exists(Room room)
        {
            var efRoom = _context.Rooms.Where(rm => rm.Name == room.Name && rm.RoomId == room.RoomId).FirstOrDefault();
            return efRoom != null;
        }

        public void Insert(Room room)
        {
            if (_room.ContainsKey(room.Name))
            {
                return;
            }

            EFRepository.Models.Room newRoom = new()
            {
                //id is generated by database
                BuildingId = room.BuildingId,
                Name = room.Name,
                RoomTypeId = room.RoomTypeId,
                RoomKindId = room.RoomKindId,
                Capacity = room.Capacity,
            };

            var efRoom = _context.Rooms.Add(newRoom).Entity;
            var count = _context.SaveChanges();
        }

        public void Update(Room roomToUpdate, Room newRoom)
        {
            if (!Exists(roomToUpdate)) return;

            var efRoomToUpdate = _context.Rooms.Where(rm => rm.Name == roomToUpdate.Name && rm.RoomId == roomToUpdate.RoomId).FirstOrDefault();

            try
            {
                //id is not updated
                efRoomToUpdate.Name = newRoom.Name;
                efRoomToUpdate.RoomTypeId = newRoom.RoomTypeId;
                efRoomToUpdate.RoomKindId = newRoom.RoomKindId;
                efRoomToUpdate.Capacity = newRoom.Capacity;

                var efUpdate = _context.Update(efRoomToUpdate).Entity;
                var count = _context.SaveChanges();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message, ex);
            }
        }

    }
}
