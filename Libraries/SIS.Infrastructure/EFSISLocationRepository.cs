using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using SIS.Domain.Interfaces;
using SIS.Infrastructure.EFRepository.Context;
using Location = SIS.Domain.Location;

namespace SIS.Infrastructure
{
    public class EFSISLocationRepository : ISISLocationRepository
    {
        private readonly ILogger<EFSISLocationRepository> _logger;
        private readonly IConfiguration _configuration;
        private readonly SisDbContext _context;

        private Dictionary<string, Location> _location;
        public Dictionary<string, Location> Locations
        {
            get
            {
                if (_location != null) return _location;
                return RefreshLocation();
            }
        }

        public EFSISLocationRepository(ILogger<EFSISLocationRepository> logger, IConfiguration configuration, SisDbContext context)
        {
            _logger = logger;
            _configuration = configuration;
            _context = context;

            RefreshLocation();
        }

        public Dictionary<string, Location> RefreshLocation()
        {
            _location = new();
            var dbLocation = _context.Locations.ToList();
            foreach (var location in dbLocation)
            {
                var rm = new Location
                {
                    LocationId = location.LocationId,
                    Name = location.Name,
                    CampusId = location.CampusId
                };

                _location.Add(rm.Name, rm);
            }
            return _location;
        }

        public void Delete(Location location)
        {
            if (!Exists(location))
            {
                return;
            }

            var efLocation = _context.Locations.Where(lc => lc.Name == location.Name && lc.LocationId == location.LocationId).FirstOrDefault();

            try
            {
                var efRemove = _context.Remove(efLocation).Entity;
                var count = _context.SaveChanges();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message, ex);
            }

        }

        public bool Exists(Location location)
        {
            var efLocation = _context.Locations.Where(lc => lc.Name == location.Name && lc.LocationId == location.LocationId).FirstOrDefault();
            return efLocation != null;
        }

        public void Insert(Location location)
        {
            if (_location.ContainsKey(location.Name))
            {
                return;
            }

            EFRepository.Models.Location newLocation = new()
            {
                //id is generated by database
                Name = location.Name
            };

            var efLocation = _context.Locations.Add(newLocation).Entity;
            var count = _context.SaveChanges();
        }

        public void Update(Location locationToUpdate, Location newLocation)
        {
            if (!Exists(locationToUpdate)) return;

            var efLocationToUpdate = _context.Buildings.Where(lc => lc.Name == locationToUpdate.Name && lc.LocationId == locationToUpdate.LocationId).FirstOrDefault();

            try
            {
                //id is not updated
                efLocationToUpdate.Name = newLocation.Name;


                var efUpdate = _context.Update(efLocationToUpdate).Entity;
                var count = _context.SaveChanges();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message, ex);
            }
        }

    }
}
