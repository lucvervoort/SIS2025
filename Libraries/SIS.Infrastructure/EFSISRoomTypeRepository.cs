using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using SIS.Domain.Interfaces;
using SIS.Infrastructure.EFRepository.Context;
using RoomType = SIS.Domain.RoomType;

namespace SIS.Infrastructure
{
    public class EFSISRoomTypeRepository : ISISRoomTypeRepository
    {
        private readonly ILogger<EFSISRoomTypeRepository> _logger;
        private readonly IConfiguration _configuration;
        private readonly SisDbContext _context;

        private Dictionary<string, RoomType> _roomType;
        public Dictionary<string, RoomType> RoomTypes
        {
            get
            {
                if (_roomType != null) return _roomType;
                return RefreshRoomType();
            }
        }

        public EFSISRoomTypeRepository(ILogger<EFSISRoomTypeRepository> logger, IConfiguration configuration, SisDbContext context)
        {
            _logger = logger;
            _configuration = configuration;
            _context = context;

            RefreshRoomType();
        }

        public Dictionary<string, RoomType> RefreshRoomType()
        {
            _roomType = new();
            var dbRoomType = _context.RoomTypes.ToList();
            foreach (var roomType in dbRoomType)
            {
                var rm = new RoomType
                {
                    RoomTypeId = roomType.RoomTypeId,
                    Name = roomType.Name,
                };

                _roomType.Add(rm.Name, rm);
            }
            return _roomType;
        }

        public void Delete(RoomType roomType)
        {
            if (!Exists(roomType))
            {
                return;
            }

            var efRoomType = _context.RoomTypes.Where(rmt => rmt.Name == roomType.Name && rmt.RoomTypeId == roomType.RoomTypeId).FirstOrDefault();

            try
            {
                var efRemove = _context.Remove(efRoomType).Entity;
                var count = _context.SaveChanges();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message, ex);
            }

        }

        public bool Exists(RoomType roomType)
        {
            var efRoomType = _context.RoomTypes.Where(rmt => rmt.Name == roomType.Name && rmt.RoomTypeId == roomType.RoomTypeId).FirstOrDefault();
            return efRoomType != null;
        }

        public void Insert(RoomType roomType)
        {
            if (_roomType.ContainsKey(roomType.Name))
            {
                return;
            }

            EFRepository.Models.RoomType newRoomType = new()
            {
                //id is generated by database
                Name = roomType.Name
            };

            var efRoomType = _context.RoomTypes.Add(newRoomType).Entity;
            var count = _context.SaveChanges();
        }

        public void Update(RoomType roomTypeToUpdate, RoomType newRoomType)
        {
            if (!Exists(roomTypeToUpdate)) return;

            var efRoomTypeToUpdate = _context.RoomTypes.Where(rmt => rmt.Name == roomTypeToUpdate.Name && rmt.RoomTypeId == roomTypeToUpdate.RoomTypeId).FirstOrDefault();

            try
            {
                //id is not updated
                efRoomTypeToUpdate.Name = newRoomType.Name;
         

                var efUpdate = _context.Update(efRoomTypeToUpdate).Entity;
                var count = _context.SaveChanges();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message, ex);
            }
        }

    }
}
